// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Orders /> should render correctly 1`] = `
<Orders
  fetchPortfolioItems={[Function]}
  getLinkedOrders={[Function]}
  isLoading={false}
  linkedOrders={
    Object {
      "current": Array [],
      "past": Array [],
    }
  }
  portfolioItems={Array []}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
/>
`;

exports[`<Orders /> should render correctly in loading state 1`] = `
<Orders
  fetchPortfolioItems={[Function]}
  getLinkedOrders={[Function]}
  isLoading={false}
  linkedOrders={
    Object {
      "current": Array [],
      "past": Array [],
    }
  }
  portfolioItems={Array []}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
/>
`;

exports[`<Orders /> should render past orders correctly 1`] = `
<Orders
  fetchPortfolioItems={[Function]}
  getLinkedOrders={[Function]}
  isLoading={false}
  linkedOrders={
    Object {
      "current": Array [
        Object {
          "created_at": 2019-05-15T17:25:07.257Z,
          "id": "order-1",
          "orderItems": Array [
            Object {
              "portfolio_item_id": "foo",
            },
          ],
          "ordered_at": "Foo",
          "requests": Array [],
          "state": "ordered",
        },
      ],
      "past": Array [
        Object {
          "created_at": 2019-05-15T17:25:07.257Z,
          "id": "order-2",
          "orderItems": Array [
            Object {
              "external_url": "https://example.com/fake-done",
              "order_id": "order-2",
              "portfolio_item_id": "123",
              "state": "Completed",
            },
          ],
          "ordered_at": "past_date",
          "requests": Array [],
          "state": "Completed",
        },
      ],
    }
  }
  portfolioItems={Array []}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
/>
`;
