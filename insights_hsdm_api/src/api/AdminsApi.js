/**
 * Insights Service Catalog API
 * This is a API to fetch and order catalog items from different cloud sources
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Portfolio from '../model/Portfolio';

/**
* Admins service.
* @module api/AdminsApi
* @version 1.0.0
*/
export default class AdminsApi {

    /**
    * Constructs a new AdminsApi. 
    * @alias module:api/AdminsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * API to add a new portfolio
     * Returns the added portfolio object 
     * @param {module:model/Portfolio} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    addPortfolioWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPortfolio");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AdminSecurity', 'UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/portfolios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * API to add a new portfolio
     * Returns the added portfolio object 
     * @param {module:model/Portfolio} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    addPortfolio(body) {
      return this.addPortfolioWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch a specific Portfolio
     * By passing in the portfolio id you can fetch a specific portfolio. 
     * @param {Number} portfolioId The Portfolio ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Portfolio} and HTTP response
     */
    fetchPortfolioWithIdWithHttpInfo(portfolioId) {
      let postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling fetchPortfolioWithId");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AdminSecurity', 'UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolio/{portfolio_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch a specific Portfolio
     * By passing in the portfolio id you can fetch a specific portfolio. 
     * @param {Number} portfolioId The Portfolio ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Portfolio}
     */
    fetchPortfolioWithId(portfolioId) {
      return this.fetchPortfolioWithIdWithHttpInfo(portfolioId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * API to list portfolios
     * Returns an array of portfolio objects 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Portfolio>} and HTTP response
     */
    listPortfoliosWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AdminSecurity', 'UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Portfolio];

      return this.apiClient.callApi(
        '/portfolios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * API to list portfolios
     * Returns an array of portfolio objects 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Portfolio>}
     */
    listPortfolios() {
      return this.listPortfoliosWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
